常见数据库: Oracle, DB2, SQL Server, Postgre SQL, MySQL

// MySQL 关系型数据库

## 相关术语
数据库系统 Database System(DBS)
·数据库 Database
·数据库管理系统(Database Management System,DBMS)
·应用开发工具
·管理员及用户

## SQL语言: 结构化查询语言
·DDL 数据定义语言
·DML 数据操纵语言  插入,更新,删除
·DQL 数据查询语言  查询
·DCL 数据控制语言  控制用户权限

## MySQL 的配置文件: my.cnf

## 登录/退出MySQL
·登录: mysql -uroot -p
·退出: exit

·登录: mysql -uroot -p密码
·退出: quit

## 得到版本号
·未登录时查看版本号: mysql -uroot -p密码 -V
·mysql -uroot -p -V
·mysql -V
·mysql --version

## 登录的同时打开指定数据库
·mysql -uroot -p -D db_name

// 登录信息中需要了解: 命令行结束默认是用';'或'\g'结束

// 查看帮助手册: 'help' 或 '\h' 或 '?' + 相关关键字

// 取消当前命令的执行 把';' 换成 '\c'

## 常用SQL语句
·SELECT USER() 得到登录的用户
·SELECT VERSION() 得到MySQL的版本信息
·SELECT NOW() 得到当前时间
·SELECT DATABASE() 得到当前打开的数据库
·SHOW DATABASES|SCHEMAS;
·SHOW WARNINGS; 查看上一步操作产生的警告

## SQL语句语法规范
·常用的MySQL的关键字需要大写, 库名, 表名, 字段名称小写
·SQL语句支持折行操作: 拆分的时候不要把完整的单词拆开
·数据库名称, 表名称, 字段名称不要使用MySQL的保留字, 如果必须使用, 需要用反引号``括起来
·


## 数据库相关操作(DDL)
·创建数据库:
    CREATE {DATABASE|SCHEMA} db_name;
    注意: 数据库名称最后又意义
    不要包含关键字/保留字
·不存在则创建:
    CREATE DATABASE [IF NOT EXISTS] db_name;
·创键数据库同事置顶编码方式:
    CREATE DATABASE [IF NOT EXISTS] db_name [DEFAULT] CHARACTER SET [=] charset;
·查看指定数据库的详细信息
    SHOW CREATE DATABASE db_name;
·修改指定数据库的编码方式:
    ALTER DATABASE db_name [DEFAULT] CHARACTER SET [=] charset;
·打开指定数据库:
    USE db_name;
·得到当前打开的数据库:
    SELECT DATABASE|SCHEMA();
·删除指定的数据库:
    DROP DATABASE db_name;
·如果数据库存在删除:
    DROP DATABASE [IF EXISTS] db_name;




## 数据表相关操作
   数据表是数据库中最重要的组成部分之一, 数据是保存在数据表中
   数据表由行(row)和列(column)组成
   每个数据表中至少有一列, 行可以有0行或多行
   表名要求唯一, 不要包含特殊字符, 最好含义明确

·创建数据表:
    CREATE TABLE [IF NOT EXISTS] tbl_name(
      字段名称 字段类型 [完整性约束条件],
      字段名称 字段类型 [完整性约束条件]
    )ENGINE=存储引擎 CHARSET=编码方式;
·查看已有的数据表:
    SHOW [FULL] TABLES [{FROM | IN} db_name]
    [LIKE 'pattern' | WHERE expr];
·查看指定数据表的详细信息:
    SHOW CREATE TABLE tbl_name;
·查看表结构
    DESC tbl_name;
    DESCRIBE tbl_name;
    SHOW COLUMNS FROM tbl_name;
·删除指定的数据表

## MySQL的数据类型
·数值型
    ·整数型
    ·浮点数
    ·定点数
·字符串类型
·日期时间类型

## 完整性约束条件
·UNSIGNED 无符号, 从零开始
·ZEROFILL 零填充, 当现实长度不够的时候可以使用前补零的效果填充至指定长度, 且不能为负
·NOT NULL 非空约束, 也就是插入值得时候, 这个字段必须有值
·DEFAULT 默认值
·PRIMARY KEY 主键, 标记记录的唯一性, 不能重复, 一个表只能有一个主键, 自动禁止为空
·UNIQUE KEY 唯一性, 一个表可以有多个唯一所以, 值不能重复, 但NULL可以
·AUTO_INCREMENT 自增长, 只能用于数值列, 而且配合索引所有
·FOREIGN KEY 外键约束
  只有InnoDB存储引擎支持外键
  主表的外键必须关联副表的主键
  1.子表的外键字段和主表的主键字段, 类型相似, 如果是数值类型, 类型要求一致, 并且无符号也要一致
  如果是字符型长度可以不同
  2.如果外键字段没有创建索引, MySQL会自动帮我们添加索引
  3.子表的外键必须关联主表的主键
  ·建表时指定外键: [CONSTRAINT 外键名称] FOREIGN KEY(字段名称) REFERENCES 主表字段名称
  ·动态添加外键: ALTER TABLE tbl_name [CONSTRAINT cateId_fk_newsCate] ADD FOREIGN KEY(外键字段) REFERENCES (主表主键)
      注意: 动态添加外键之前, 表中的记录一定要是合法的
  ·动态删除外键: ALTER TABLE tbl_name DROP FOREIGN KEY fk_name;

  外键约束的参照操作:
    CASCADE               从父表删除或更新, 子表也会删除或更新
    SET NULL              父表删除或更新 对应的子表字段设置为NULL
    NO ACTION|RESTRICT    (默认)拒绝对父表做更新或产出操作



## 插入
INSERT
## 查询


## 表结构相关操作
·添加字段:
    ALTER TABLE tbl_name ADD 字段名 字段属性[完整性约束] 位置[FIRST|AFTER[字段名]]
·删除字段:
    ALERT TABLE tbl_name DROP 字段名
·添加默认值
    ALTER TABLE tbl_name ALTER 字段名 SET DEFAULT 默认值
·删除默认值
    ALTER TABLE tbl_name ALTER 字段名 DROP DEFAULT
·重置编号AUTO_INCREMENT
    ALTER TABLE `user` AUTO_INCREMENT=1;

## 修改字段类型/约束 modify
    ALTER TABLE tbl_name MODIFY 字段名 字段类型 [约束] [位置:FIRST|AFTER]
## 修改字段名称/类型/约束 change
    ALTER TABLE tbl_name CHANGE 原字段名称 新字段名称 字段类型 [约束] [位置:FIRST|AFTER]

## 添加主键
    ALTER TABLE tbl_name ADD PRIMARY KEY (字段名称);
## 删除主键
    ALTER TABLE tbl_name DROP PRIMARY KEY;


## 添加唯一
    ALTER TABLE tbl_name ADD UNIQUE KEY(index_name);
## 删除唯一
    ALTER TABLE tbl_name DROP INDEX index_name;

## 修改表名
    ALTER TABLE tbl_name RENAME [TO|AS] new_name;
    RENAME TABLE tbl_name TO new_name;



## MySQL存储引擎
·MyiSAM 存储引擎
  MySQL5.5之前的默认引擎 MyISAM 默认产生以下三个文件,
  可以在渐变的时候指定数据文件和索引文件的位置, 只有MyISAM表支持
  DATA DIRECORY [=] 绝对路径
  INDEXDIRECORY [=] 绝对路径
    ·frm表结构文件
    ·MYD存储数据的文件
    ·MYI索引文件
  MyISAM 单表最大支持的数据量: 2^64 条记录; 每个表最多可以建立64个索引
  复合索引最多包含16个字段(列), 索引值最大长度是1000DB
  MyISAM引擎的存储格式:
    定长(FIXED 静态 字段中包含了VARCHAR/TEXT/BLOB),
    动态(DYNAMIC), 字段中不包含了VARCHAR/TEXT/BLOB),
    压缩(COMPRESSED, 只能通过 myisampack创建)

·InnoDB存储引擎
  1. MySQL5.5之后默认引擎, 设计遵循ACID模型, 支持事务, 具有从服务崩溃中回复的能力,
    能够最大限度保护数据
    ·原子性(Atomiocity)
    ·一致性(Consistency)
    ·隔离性(Isolation)
    ·持久性(Durability)
  2. 支持行级锁: 提升多用户并发的读写性能
  3. 支持外键, 保证数据一致性和完整性
  4. 拥有自己独立的缓存池, 常用的数据和索引都在混村中
  5. 对INSERT UPDATE DELETE, InnoDB 会使用一种change buffering 的机制自动优化
    还可以提供一致性的读, 并且还能够混村变更的数据, 减少磁盘I/O, 提高性能
  6. 创建InnoDB 表之后会产生两个文件
    ·frm表结构文件
    ·ibd数据+索引表空间
  7. 所有的表都需要创建主键, 最好配上AUTO_INCREMENT, 也可以放到经常查询的列作为主键

## MySQL 数据操作
· 添加记录
    ·INSERT [INTO] tbl_name(col_name...) {VALUE|VALUES}(values...);
     不指定字段名称: INSERT tbl_name VALUE(value...) 需要按建表时的字段顺序
    ·一次插入多条: INSERT tbl_name(col_name) VALUES(...),(...)...;
    ·INSERT tbl_name SET col_name=value,...
    ·INSERT tbl_name(col_name...) SELECT col_name... FROM tbl_name [WHERE]
· 修改记录
    ·UPDATE tbl_name SET col_name=value,col_name=value,... [WHERE 条件]
      如果不添加条件, 这个表中的内容都会被更新

· 删除记录
    ·DELETE FROM tbl_name [WHERE];
      如果不加条件, 表中所有记录会被删除. 不会重置AUTO_INCREMENT的值
    ·TRUNCATE [TABLE] tbl_name;
      清除表中所有记录并重置AUTO_INCREMENT
· 查询记录
    ·SELECT select_expr,... FROM tbl_name [WHERE 条件]
    [GROUP BY {col_name|position} HAVING 二次筛选]
    [ORDER BY {col_name|position|expr}{ASC|DESC}]
    [LIMT 限制结果集的显示条数]

    ·SELECT * FROM tbl_name 查询表中的所有记录 *代表所有字段
    ·select 字段名,... FROM tbl_name


    ·库名.表名
      SELECT 字段名,...FROM db_name.tbl_name;

    ·给字段起名:
      SELECT 字段名 [AS] 别名名称 db_name.tbl_name;

    ·给数据表起别名
      SELECT 字段名,... FROM tbl_name [AS] 表名;

    ·表名.字段名
      SELECT tbl_name.col_name FROM tbl_name;

    ·筛选复合条件的记录
      SELECT col_name,... FROM tbl_name WHERE 条件
      ·比较运算符
        ·比较运算符: > >= < <= !=
        ·<> 不等于
        ·<=> 等于,可以检测到NULL = 检测不到NULL
        ·IS [NOT] NULL 检测值是否为空
      ·范围
        [NOT] BETWEEN ... AND
      ·集合
        [NOT] IN(值,...)
      ·逻辑与AND 逻辑或OR
      ·匹配字符,模糊查询 like 默认忽略大小写
        ·% 任意长度字符串
        ·_任意一个字符
    ·分组 group by:
      把值相同的放在一个组中, 最终查询的结果只会显示组中的一条记录
      ·配合GROUP_CONCAT()查看组中的某个字段的详细信息
      ·配合聚合函数使用

    ·聚合函数
      COUNT()         数量     如果是COUNT(`字段名`)  字段值为NULL的记录不统计进来 COUNT(*)则会统计
      SUM()           求和
      MAX()           最大值
      MIN()           最小值
      AVG()           平均值
    ·WITH ROLLUP 关键字, 会在记录末尾添加一条记录, 是上面记录的综合

    ·HAVING 子句对分组结果进行二次筛选
      注意: HAVING 只能接 GROUP BY 前面提到的字段 或聚合函数



    ·ORDER BY 排序
      ORDER BY 字段 ASC|DESC (默认是ASC)
      ASC 升序: 1234....
      DESC 降序: 432...

    ·实现随机记录
      ORDER BY RAND();
      SELECT * FROM user1 ORDER BY RAND();

    ·LIMIT限制结果集的显示条数(分页)
      Limit 值:  显示结果集的前几条记录
      LImit offset,row_count 从offset显示row_count条记录
      注意: UPDATE或者DELETE时 LIMIT只支持一个参数形式


    ·多表查询
      ·笛卡尔积的形式
      ·内连接的形式     查询两个表中复合链接条件的记录
        SELECT 字段名,.. FROM tbl_name1 [INNER] JOIN tbl_name2 ON 链接条件
      ·外链接的形式

        左外链接 先显示左表的全部记录,再去右表中查询符合条件的记录,不符合的以NULL代替, 左主表,右从表
          SELECT 字段名,... FROM tbl_name1 LEFT [OUTER] JOIN tabl_name2 ON 条件
        右外链接 先显示右表的全部记录,再去左表中查询符合条件的记录,不符合的以NULL代替, 右主表,左从表
          SELECT 字段名,... FROM tbl_name1 RIGHT [OUTER] JOIN tabl_name2 ON 条件


     ·特殊形式的查询
        1. 子查询
            SELECT col_name FROM tbl_name WHERE col_name=(SELECT col_name FROM tbl_name);
            由IN引发的子查询
            由比较运算符引起的子查询
            由exists引发的子查询
            带有ANY SOME ALL关键字的子查询

            INSERT SELECT
            CREATE SELECT





    ·联合查询
      UNION
      UNION ALL
      SELECT col_name... FROM tbl_name1 UNION [ALL] SELECT col_name FROM tbl_name2

    ·自身连接查询: 无限分类数据表的实现形式










//
